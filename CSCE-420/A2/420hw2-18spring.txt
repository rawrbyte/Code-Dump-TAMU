(Print this page as a cover sheet for your printouts)

CSCE 420 HOMEWORK 2
Dr. Daugherity
Section: ______________ 
Due: 11:59 P.M. Wednesday, February 28, 2018

"On my honor, as an Aggie, I have neither given nor received any unauthorized 
aid on any portion of the academic work included in this assignment."


________________________________	________________________________
Typed or printed name of student	           Signature of student

NOTE:  Please follow your lab instructor's directions for submitting your 
assignment through CSNET.  ONLY ASSIGNMENTS SUBMITTED TO CSNET WILL BE GRADED!
Make a printout of each source file and staple it behind this cover sheet.
Sign it and turn it in in class Thursday.  IF YOU DO NOT TURN IN A SIGNED COVER 
SHEET YOUR WORK WILL NOT BE GRADED!

NOTE:  Homework will be graded on compute.cse.tamu.edu, using g++7.2.0 with 
-std=c++17, or javac and java, or python3.6 (not python or python2 or 
python3).

You are free to develop your programs on any other platform, but it is your 
responsibility to make sure your programs also compile and execute correctly
on compute.cse.tamu.edu as specified.

NOTE:  Each file submitted (hw2pr1.cpp, etc.--see below) must begin as
follows:
//Your name
//Your UIN
//CSCE 420
//Due: February 26, 2018
//hw2pr1.cpp (or whatever this file name is)

NOTE:  Also write a README.txt file with whatever information is needed to
compile and run your programs.  Zip the README.txt and the homework files into
a single file named hw2.zip and submit to CSNET.

The grade for this lab will be based on style (formatting, variable names, 
comments, etc.), syntax (no compilation or link errors), and correctness 
(passes all test cases).  Your grade for this lab is:
Problem #	 1       2       3       4 
Style             /2      /4      /4      /2 
Syntax            /3      /6      /6      /3 
Correctness       /5      /10     /10     /5
-------------------------------------------------------------------
Total             /10     /20     /20     /10
Grand total _____/50

1. (10 points) Write a program named hw2pr1.cpp etc. to solve a simple class of
cryptarithmetic problems MORE EFFICIENTLY THAN BY BRUTE FORCE (EXHAUSTIVE
SEARCH) by using deductions about even/odd, digit range, etc.  For example, in 
the test case 

 CADET
+CORPS
------
 TROOP

given below your program can deduce that C<5.  (You do not have to use this 
deduction; this is just an example of a deduction which would reduce the search
space.) By convention, each letter stands for a different digit and there are
no leading zeroes.

You program should read three strings, right justify the strings to make an 
addition problem, and find a solution.  (Any string can be any length.)  If 
there is more than one solution, you only need to find one.  For the example in
Figure 5.2, the input would be

TWO
TWO
FOUR

Run your program on this example plus the following:

TURING
TESTER
SUCCESS

CADET
CORPS
TROOP

FACE
PALM
YMMV

The grader will also run your project on additional problems.  You may assume
the input contains only upper case letters, and no more than 10 different 
letters. 

2. (20 points) In a minimax tree the root is conventionally the max player and
the utility function for leaf nodes is what the max player wants to maximize.
After the max player moves, the root of the rest of the game is the min player,
who wants to minimize the utility function.  Code the mutually-recursive 
max_value and min_value functions specified in Figure 5.3 and use them to find 
the min (root's value) of a min tree read in from the keyboard as a nested list.

For example, the tree in Figure 5.2 would be input as
	((3,12,8),(2,4,6),(14,5,2))
with the triangles inverted so the root is min, and the tree passed out in 
class would be input as
	((3,8,(7,(3,0,7),(8,8,2))),
	 (4,(7,9,8),8),
	 (((3,6,4),2,6),((9,2,9),4,7,(6,4,5) ),4,(6,4,5))
	)
with the triangles inverted so the root is min.
Name your program hw2pr2.cpp, etc.

3. (20 points) Write a Horn clause inference engine which accepts a filename
from the user and reads Horn clauses from that file followed by a query (that
is, what you are asking to be proven).

The format of the input file will be one Horn clause per line in PROLOG 
notation (see section 9.4.2).  For example, if the data file contains

	B:-A.
	D:-B,C.
	A.
	C.
	?D.

then the program will print "TRUE" since it can deduce from the Horn clauses
that D is true. Print "FALSE" if you cannot prove the query.   

Hint: Use the DPLL_satisfiable function in Fig. 7.17.

To prove D is equivalent to saying the Horn clauses entail (imply) D.  Since an
implication is only false if the "if" side is true and the "then" side is false,
we add "not D" to the list of Horn clauses and call DPLL_satisfiable.  If it
returns false, that means "not not D" must be true, which is D, which is what
we were trying to prove, so output "TRUE."  If the query had been E then
adding "not E" and calling DPLL_satisfiable would result in true, so output
"FALSE."

Hint: In PROLOG notation "not D" can be written
	:-D.
Since the "then" side can always be or'ed with false, this is equivalent to
	D --> false
which is equivalent to "not D."  Another way of thinking about it is that the
"then" side of a Horn clause is false or'ed with whatever terms are there (in
this case none).

Name your program hw2pr3.cpp etc.  

OPTIONAL EXTRA CREDIT 
=====================
4. (10 points) Write a program named hw2pr4.cpp etc. which prints the truth
table for any formula in CNF with 1 or 2 terms in each clause.  Use - for
negation and + for OR.  A sample run of your program should look like this:

	Enter the clauses in your CNF formula, one per line:
	Q+-R
	P
	-P+R
	Control-D (end of file)

	P  Q  R  Formula
	----------------
	F  F  F     F
	F  F  T     F
	F  T  F     F
	F  T  T     F
	T  F  F     F
	T  F  T     F
	T  T  F     F
	T  T  T     T

The variables will be single upper-case letters A-Z, so there could be up to 26
variables, but we will only test it up to 6 variables. :-)

Name your program hw2pr4.cpp etc.
